//leetcode
//268. Missing Number 考虑了求和的方法，一开始在计算不缺失数字的总和时出现了问题（另外的方法是异或和二分法吧）
int missingNumber(int* nums, int numsSize) {
    int sum = 0;
    int res = 0;
    for (int i = 0; i < numsSize; i++){
        sum += nums[i];
    }
    int tmp = (numsSize*(numsSize+1))/2;
    res = tmp - sum;
    return res;
}

//118. Pascal's Triangle
int** generate(int numRows, int** columnSizes) {
    if (numRows == 0) return 0;
    int **returnArray = (int*)malloc(sizeof(int*) * numRows);
    int *columnSizesA = (int*)malloc(sizeof(int)*numRows);
    int i; 
    int j;
    for (i = 0; i < numRows; i++){
        returnArray[i] = (int*)malloc(sizeof(int)*(i+1));
        
        columnSizesA[i] = i+1;
        for (j = 0; j <= i; j++){
            if (j == 0 || j == i)
            {
                returnArray[i][j] = 1; //returnArray[i-1][j];
            }
            else{
                returnArray[i][j] = returnArray[i-1][j] + returnArray[i-1][j-1];
            }
        }
    }
    *columnSizes = columnSizesA;
    return returnArray;
}  //第一次是在申请空间时出了点问题，后来简单改了下竟然通过了。因为是已经定义好的函数，所以目前一直不清楚int** columnSizes的作用在哪里

//203. Remove Linked List Elements
//删除链表中指定的元素，自己写的还是不靠谱，两种解法是根据discuss中参考来的。一开始就卡在如何设置前一个节点的上，没有想通如何存储当前节点的上一个节点
struct ListNode* removeElements(struct ListNode* head, int val) {
    /*struct ListNode *p = NULL;
    struct ListNode *p1 = NULL;
    if (head == NULL) return head;
    for (p = head; p != NULL; p = p->next)
    {
        if (p->val == val){
            if (p == head){
                head = head->next;
            }
            else{
                p1->next = p->next;
            }
    }
        else
        {
            p1 = p;
        }
    }*/
    struct ListNode *dummy = (struct ListNode*)malloc(sizeof(struct ListNode));
    dummy->val = 0;
    dummy->next = head;
    struct ListNode *prev = dummy;
    struct ListNode *curr = dummy->next;
    struct ListNode *NEXT = NULL;
    //prev->next = head;
    while(curr)
    {
        NEXT = curr->next;
        if (curr->val == val){
            prev->next = curr->next;
        }
        else{
            prev = curr;
        }
        curr = NEXT;
    }

    return dummy->next;
}

//234. Palindrome Linked List
//参考discuss中做了数组的比较实现，但是对提到的那个归途赛跑的不是太理解；  
//已经差不多了
bool isPalindrome(struct ListNode* head) {
    /*int *array = (int*)malloc(sizeof(int));  //将链表中值转换到数组中以便比较，参考discuss
    int size = 0;
    struct ListNode *p;
    p = head;
    while (p)
    {
        size += 1;
        array = (int*)realloc(array, size*sizeof(int));
        array[size-1] = p->val;
        p = p->next;
    }
    for (int i = 0; i < size/2; i++)
    {
        if (array[i] != array[size-i-1]){
            return false;
        }
    }
    return true;*/     //还有一种龟兔赛跑的算法没有看太懂
    if (!head || !head->next) return true;
    struct ListNode *slow = head;
    struct ListNode *fast = head->next->next;
    while(fast && fast->next)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    if (fast == NULL) fast = slow->next;
    else fast = slow->next->next;
    slow->next = NULL;   //截此将链表分成两个部分
    struct ListNode *p, *p1, *p2;   //p算是中转，p1存储反序链表，p2取节点
    p2 = head->next;
    p1 = head;
    p1->next = NULL;    //对p1以及p2分配时顺序不能发生变化，就上面三句， 否则会出问题
    while (p2)
    {
        p = p2->next;
        p2->next = p1;
        p1 = p2;
        p2 = p;
    }   //这部分将链表反序
    while (fast)
    {
        if (fast->val != slow->val)
            return false;
        fast= fast->next;
        slow= slow->next;
    }
    return slow == NULL;  //参考discuss
}
